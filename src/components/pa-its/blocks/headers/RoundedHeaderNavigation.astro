---
import { Icon } from 'astro-icon/components';

import Button from '~/components/pa-its/Button.astro';
import { trimSlash, getHomePermalink } from '~/utils/permalinks';

import { headerData } from '~/navigation';
import ToggleTheme from '~/components/pa-its/ToggleTheme.astro';
import ToggleMenu from '~/components/pa-its/ToggleMenu.astro';
import LanguagePicker from '~/components/pa-its/LanguagePicker.astro';
import Logo from '~/components/pa-its/Logo.astro';
import { useTranslatedPath, useTranslations } from '~/utils/i18n';
import { getLocale } from 'astro-i18n-aut';

export interface Props {
  id?: string;
  isDark?: boolean;
  showToggleTheme?: boolean;
  showLanguagePicker?: boolean;
}

const { id = 'header', isDark = false, showToggleTheme = false, showLanguagePicker = false } = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
const lang = getLocale(Astro.url);
const translatePath = useTranslatedPath(lang);
const t = useTranslations(lang);
---

<header
  class="sticky inset-x-0 top-4 z-50 flex w-full flex-wrap text-sm md:flex-nowrap md:justify-startdata-aw-sticky-header"
  {...id ? { id } : {}}
>
  <div class="absolute inset-0"></div>
  <div
    class:list={[
      'relative mx-2 w-full rounded-[36px] border px-4 py-3 backdrop-blur-md md:flex md:items-center md:justify-between md:px-6 md:py-0 lg:px-8 xl:mx-auto',
      {
        'border-yellow-100/40 bg-yellow-50/60 dark:border-neutral-700/40 dark:bg-neutral-800/80 dark:backdrop-blur-md':
          isDark,
        'border-gray-200 bg-white/60 dark:border-gray-700/40 dark:bg-gray-800/80 dark:backdrop-blur-md': !isDark,
      },
    ]}
  >
    <div class="flex justify-between">
      <a class="flex items-center" href={getHomePermalink()}>
        <Logo />
      </a>
      <div class="flex items-center md:hidden">
        <ToggleMenu />
      </div>
    </div>
    <nav
      class="items-center w-full md:w-auto hidden md:flex md:mx-5 text-default overflow-y-auto overflow-x-hidden md:overflow-y-visible md:overflow-x-auto md:justify-self-center"
      aria-label="Main navigation"
    >
      <ul
        class="flex flex-col md:flex-row md:self-center w-full md:w-auto text-xl md:text-[0.9375rem] tracking-[0.01rem] font-medium md:justify-center mt-6 md:mt-0"
      >
        {
          headerData.links?.map(({ text, href, links }) => (
            <li class={links?.length ? 'dropdown' : ''}>
              {links?.length ? (
                <>
                  <button
                    type="button"
                    class="hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap"
                  >
                    {t(text ?? '')}{' '}
                    <Icon name="tabler:chevron-down" class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden md:inline" />
                  </button>
                  <ul class="dropdown-menu md:backdrop-blur-md dark:md:bg-dark rounded md:absolute pl-4 md:pl-0 md:hidden font-medium md:bg-white/90 md:min-w-[200px] drop-shadow-xl">
                    {links.map(({ text: text2, href: href2 }) => (
                      <li>
                        <a
                          class:list={[
                            'first:rounded-t last:rounded-b md:hover:bg-gray-100 hover:text-link dark:hover:text-white dark:hover:bg-gray-700 py-2 px-5 block whitespace-no-wrap',
                            { 'aw-link-active': href2 === currentPath },
                          ]}
                          href={translatePath(href2 ?? '')}
                        >
                          {t(text2 ?? '')}
                        </a>
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                  class:list={[
                    'hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap dark:text-white',
                    { 'aw-link-active': href === currentPath },
                  ]}
                  href={translatePath(href ?? '', lang)}
                >
                  {t(text ?? '')}
                </a>
              )}
            </li>
          ))
        }
      </ul>
    </nav>
    <div
      class:list={[
        'hidden md:self-center md:flex items-center md:mb-0 fixed w-full md:w-auto md:static justify-end left-0 rtl:left-auto rtl:right-0 bottom-0 p-3 md:p-0 md:justify-self-end',
      ]}
    >
      <div class="items-center grid grid-cols-3 md:flex md:grid-cols-none w-full md:w-auto gap-2">
        <div class="flex justify-start md:justify-normal">
          {showToggleTheme && <ToggleTheme iconClass="w-6 h-6 md:w-5 md:h-5 md:inline-block" />}
        </div>
        <div class="flex justify-center md:justify-normal">
          {showLanguagePicker && <LanguagePicker variant="icon" />}
        </div>
        {
          headerData.actions?.length ? (
            <div class="flex justify-end md:justify-normal">
              {headerData.actions.map((btnProps) => (
                <Button
                  href={translatePath(btnProps.href ?? '')}
                  title={t(btnProps.title ?? '') as string}
                  startIcon={btnProps.startIcon}
                  type={btnProps.type}
                />
              ))}
            </div>
          ) : (
            ''
          )
        }
      </div>
    </div>
  </div>
</header>
